# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014,
# https://github.com/ZoneMinder/ZoneMinder/graphs/contributors
# This file is distributed under the same license as the ZoneMinder package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ZoneMinder \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-03-26 18:37+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../api.rst:3
msgid "API"
msgstr ""

#: ../../api.rst:5
msgid "This document will provide an overview of ZoneMinder's API."
msgstr ""

#: ../../api.rst:8
msgid "Overview"
msgstr ""

#: ../../api.rst:10
msgid ""
"In an effort to further 'open up' ZoneMinder, an API was needed.  This "
"will allow quick integration with and development of ZoneMinder."
msgstr ""

#: ../../api.rst:13
msgid ""
"The API is built in CakePHP and lives under the ``/api`` directory.  It "
"provides a RESTful service and supports CRUD (create, retrieve, update, "
"delete) functions for Monitors, Events, Frames, Zones and Config."
msgstr ""

#: ../../api.rst:18
msgid "API Wrappers"
msgstr ""

#: ../../api.rst:19
msgid ""
"pyzm is a python wrapper for the ZoneMinder APIs. It supports both the "
"legacy and new token based API, as well as ZM logs/ZM shared memory "
"support. See `its project site "
"<https://github.com/pliablepixels/pyzm/>`__ for more details. "
"Documentation is `here <https://pyzm.readthedocs.io/en/latest/>`__."
msgstr ""

#: ../../api.rst:22
msgid "API evolution"
msgstr ""

#: ../../api.rst:24
msgid ""
"The ZoneMinder API has evolved over time. Broadly speaking the iterations"
" were as follows:"
msgstr ""

#: ../../api.rst:26
msgid ""
"Prior to version 1.29, there really was no API layer. Users had to use "
"the same URLs that the web console used to 'mimic' operations, or use an "
"XML skin"
msgstr ""

#: ../../api.rst:27
msgid ""
"Starting version 1.29, a v1.0 CakePHP based API was released which "
"continues to evolve over time. From a security perspective, it still tied"
" into ZM auth and required client cookies for many operations. Primarily,"
" two authentication modes were offered:"
msgstr ""

#: ../../api.rst:29
msgid "You use cookies to maintain session state (``ZM_SESS_ID``)"
msgstr ""

#: ../../api.rst:30
msgid ""
"You use an authentication hash to validate yourself, which included "
"encoding personal information and time stamps which at times caused "
"timing validation issues, especially for mobile consumers"
msgstr ""

#: ../../api.rst:32
msgid ""
"Starting version 1.34, ZoneMinder has introduced a new \"token\" based "
"system which is based JWT. We have given it a '2.0' version ID. These "
"tokens don't encode any personal data and can be statelessly passed "
"around per request. It introduces concepts like access tokens, refresh "
"tokens and per user level API revocation to manage security better. The "
"internal components of ZoneMinder all support this new scheme now and if "
"you are using the APIs we strongly recommend you migrate to 1.34 and use "
"this new token system (as a side note, 1.34 also moves from MYSQL "
"PASSWORD to Bcrypt for passwords, which is also a good reason why you "
"should migate)."
msgstr ""

#: ../../api.rst:33
msgid ""
"Note that as of 1.34, both versions of API access will work (tokens and "
"the older auth hash mechanism), however we no longer use sessions by "
"default.  You will have to add a ``stateful=1`` query parameter during "
"login to tell ZM to set a COOKIE and store the required info in the "
"session. This option is only available if ``OPT_USE_LEGACY_API_AUTH`` is "
"set to ON."
msgstr ""

#: ../../api.rst:36
msgid ""
"For the rest of the document, we will specifically highlight v2.0 only "
"features. If you don't see a special mention, assume it applies for both "
"API versions."
msgstr ""

#: ../../api.rst:41
msgid "Enabling API"
msgstr ""

#: ../../api.rst:43
msgid ""
"ZoneMinder comes with APIs enabled. To check if APIs are enabled, visit "
"``Options->System``. If ``OPT_USE_API`` is enabled, your APIs are active."
" For v2.0 APIs, you have an additional option right below it:"
msgstr ""

#: ../../api.rst:46
msgid ""
"``OPT_USE_LEGACY_API_AUTH`` which is enabled by default. When enabled, "
"the `login.json` API (discussed later) will return both the old style "
"(``auth=``) and new style (``token=``) credentials. The reason this is "
"enabled by default is because any existing apps that use the API would "
"break if they were not updated to use v2.0. (Note that zmNinja 1.3.057 "
"and beyond will support tokens)"
msgstr ""

#: ../../api.rst:49
msgid "Enabling secret key"
msgstr ""

#: ../../api.rst:51
msgid ""
"It is **important** that you create a \"Secret Key\". This needs to be a "
"set of hard to guess characters, that only you know. ZoneMinder does not "
"create a key for you. It is your responsibility to create it. If you "
"haven't created one already, please do so by going to "
"``Options->Systems`` and populating ``AUTH_HASH_SECRET``. Don't forget to"
" save."
msgstr ""

#: ../../api.rst:52
msgid ""
"If you plan on using V2.0 token based security, **it is mandatory to "
"populate this secret key**, as it is used to sign the token. If you "
"don't, token authentication will fail. V1.0 did not mandate this "
"requirement."
msgstr ""

#: ../../api.rst:56
msgid "Getting an API key"
msgstr ""

#: ../../api.rst:58
msgid "To get an API key:"
msgstr ""

#: ../../api.rst:65
msgid ""
"If you want to use a stateful connection, so you don't have to pass auth "
"credentials with each query, you can use the following:"
msgstr ""

#: ../../api.rst:71
msgid "This returns a payload like this for API v1.0:"
msgstr ""

#: ../../api.rst:82
msgid "Or for API 2.0:"
msgstr ""

#: ../../api.rst:98
msgid "Using these keys with subsequent requests"
msgstr ""

#: ../../api.rst:100
msgid ""
"Once you have the keys (a.k.a credentials (v1.0, v2.0) or token (v2.0)) "
"you should now supply that key to subsequent API calls like this:"
msgstr ""

#: ../../api.rst:120
msgid ""
"If you are using an ``HTTP GET`` request, the token/auth needs to be "
"passed as a query parameter in the URL. If you are using an ``HTTP POST``"
" (like when you use the API to modify a monitor, for example), you can "
"choose to pass the token as a data payload instead. The API layer "
"discards data payloads for ``HTTP GET``. Finally, If you don't pass keys,"
" you could also use cookies (not recommended as a general approach)."
msgstr ""

#: ../../api.rst:123
msgid "Key lifetime (v1.0)"
msgstr ""

#: ../../api.rst:125
msgid ""
"If you are using the old credentials mechanism present in v1.0, then the "
"credentials will time out based on PHP session timeout (if you are using "
"cookies), or the value of ``AUTH_HASH_TTL`` (if you are using ``auth=`` "
"and have enabled ``AUTH_HASH_LOGINS``) which defaults to 2 hours.  Note "
"that there is no way to look at the hash and decipher how much time is "
"remaining. So it is your responsibility to record the time you got the "
"hash and assume it was generated at the time you got it and re-login "
"before that time expires."
msgstr ""

#: ../../api.rst:128
msgid "Key lifetime (v2.0)"
msgstr ""

#: ../../api.rst:130
msgid ""
"In version 2.0, it is easy to know when a key will expire before you use "
"it. You can find that out from the ``access_token_expires`` and "
"``refresh_token_expires`` values (in seconds) after you decode the JWT "
"key (there are JWT decode libraries for every language you want). You "
"should refresh the keys before the timeout occurs, or you will not be "
"able to use the APIs."
msgstr ""

#: ../../api.rst:133
msgid "Understanding access/refresh tokens (v2.0)"
msgstr ""

#: ../../api.rst:135
msgid ""
"If you are using V2.0, then you need to know how to use these tokens "
"effectively:"
msgstr ""

#: ../../api.rst:137
msgid ""
"Access tokens are short lived. ZoneMinder issues access tokens that live "
"for 3600 seconds (1 hour)."
msgstr ""

#: ../../api.rst:138
msgid "Access tokens should be used for all subsequent API accesses."
msgstr ""

#: ../../api.rst:139
msgid ""
"Refresh tokens should ONLY be used to generate new access tokens. For "
"example, if an access token lives for 1 hour, before the hour completes, "
"invoke the ``login.json`` API above with the refresh token to get a new "
"access token. ZoneMinder issues refresh tokens that live for 24 hours."
msgstr ""

#: ../../api.rst:140
msgid ""
"To generate a new refresh token before 24 hours are up, you will need to "
"pass your user login and password to ``login.json``"
msgstr ""

#: ../../api.rst:142
msgid "**To Summarize:**"
msgstr ""

#: ../../api.rst:144
msgid ""
"Pass your ``username`` and ``password`` to ``login.json`` only once in 24"
" hours to renew your tokens"
msgstr ""

#: ../../api.rst:145
msgid ""
"Pass your \"refresh token\" to ``login.json`` once in two hours (or "
"whatever you have set the value of ``AUTH_HASH_TTL`` to) to renew your "
"``access token``"
msgstr ""

#: ../../api.rst:146
msgid "Use your ``access token`` for all API invocations."
msgstr ""

#: ../../api.rst:148
msgid ""
"In fact, V2.0 will reject your request (if it is not to ``login.json``) "
"if it comes with a refresh token instead of an access token to discourage"
" usage of this token when it should not be used."
msgstr ""

#: ../../api.rst:150
msgid ""
"This minimizes the amount of sensitive data that is sent over the wire "
"and the lifetime durations are made so that if they get compromised, you "
"can regenerate or invalidate them (more on this later)"
msgstr ""

#: ../../api.rst:153
msgid "Understanding key security"
msgstr ""

#: ../../api.rst:155
msgid ""
"Version 1.0 uses an MD5 hash to generate the credentials. The hash is "
"computed over your secret key (if available), username, password and some"
" time parameters (along with remote IP if enabled). This is not a "
"secure/recommended hashing mechanism. If your auth hash is compromised, "
"an attacker will be able to use your hash till it expires. To avoid this,"
" you could disable the user in ZoneMinder. Furthermore, enabling remote "
"IP (``AUTH_HASH_REMOTE_IP``) requires that you issue future requests from"
" the same IP that generated the tokens. While this may be considered an "
"additional layer for security, this can cause issues with mobile devices."
msgstr ""

#: ../../api.rst:157
msgid ""
"Version 2.0 uses a different approach. The hash is a simple base64 "
"encoded form of \"claims\", but signed with your secret key. Consider for"
" example, the following access key:"
msgstr ""

#: ../../api.rst:163
msgid ""
"If you were to use any `JWT token verifier <https://jwt.io>`__ it can "
"easily decode that token and will show:"
msgstr ""

#: ../../api.rst:177
msgid ""
"Don't be surprised. JWT tokens, by default, are `not meant to be "
"encrypted <https://softwareengineering.stackexchange.com/questions/280257"
"/json-web-token-why-is-the-payload-public>`__. It is just an assertion of"
" a claim. It states that the issuer of this token was ZoneMinder, It was "
"issued at (iat) Wednesday, 2019-05-15 17:19:12 UTC and will expire on "
"(exp) Wednesday, 2019-05-15 18:19:12 UTC. This token claims to be owned "
"by an admin and is an access token. If your token were to be stolen, this"
" information is available to the person who stole it. Note that there are"
" no sensitive details like passwords in this claim."
msgstr ""

#: ../../api.rst:180
msgid ""
"However, that person will **not** have your secret key as part of this "
"token and therefore, will NOT be able to create a new JWT token to get, "
"say, a refresh token. They will however, be able to use your access token"
" to access resources just like the auth hash above, till the access token"
" expires (2 hrs). To revoke this token, you don't need to disable the "
"user. Go to ``Options->API`` and tap on \"Revoke All Access Tokens\". "
"This will invalidate the token immediately (this option will invalidate "
"all tokens for all users, and new ones will need to be generated)."
msgstr ""

#: ../../api.rst:182
msgid ""
"Over time, we will provide you with more fine grained access to these "
"options."
msgstr ""

#: ../../api.rst:184
msgid "**Summarizing good practices:**"
msgstr ""

#: ../../api.rst:186
msgid "Use HTTPS, not HTTP"
msgstr ""

#: ../../api.rst:187
msgid ""
"If possible, use free services like `LetsEncrypt "
"<https://letsencrypt.org>`__ instead of self-signed certificates "
"(sometimes this is not possible)"
msgstr ""

#: ../../api.rst:188
msgid "Keep your tokens as private as possible, and use them as recommended above"
msgstr ""

#: ../../api.rst:189
msgid ""
"If you believe your tokens are compromised, revoke them, but also check "
"if your attacker has compromised more than you think (example, they may "
"also have your username/password or access to your system via other "
"exploits, in which case they can regenerate as many tokens/credentials as"
" they want)."
msgstr ""

#: ../../api.rst:193
msgid ""
"Subsequent sections don't explicitly callout the key addition to APIs. We"
" assume that you will append the correct keys as per our explanation "
"above."
msgstr ""

#: ../../api.rst:197
msgid "Examples"
msgstr ""

#: ../../api.rst:199
msgid ""
"(In all examples, replace 'server' with IP or hostname & port where "
"ZoneMinder is running)"
msgstr ""

#: ../../api.rst:202
msgid "API Version"
msgstr ""

#: ../../api.rst:203
msgid "To retrieve the API version:"
msgstr ""

#: ../../api.rst:211
msgid "Return a list of all monitors"
msgstr ""

#: ../../api.rst:217
msgid ""
"It is worthwhile to note that starting ZM 1.32.3 and beyond, this API "
"also returns a ``Monitor_Status`` object per monitor. It looks like this:"
msgstr ""

#: ../../api.rst:230
msgid ""
"If you don't see this in your API, you are running an older version of "
"ZM. This gives you a very convenient way to check monitor status without "
"calling the ``daemonCheck`` API described later."
msgstr ""

#: ../../api.rst:234
msgid "Retrieve monitor 1"
msgstr ""

#: ../../api.rst:242
msgid "Change State of Monitor 1"
msgstr ""

#: ../../api.rst:244
msgid ""
"This API changes monitor 1 to enable motion detection and recording on "
"motion detection (similar to old Modect function)"
msgstr ""

#: ../../api.rst:251
msgid "Get Daemon Status of Monitor 1"
msgstr ""

#: ../../api.rst:258
msgid "Add a monitor"
msgstr ""

#: ../../api.rst:260
msgid "This command will add a new http monitor."
msgstr ""

#: ../../api.rst:278
msgid "Edit monitor 1"
msgstr ""

#: ../../api.rst:280
msgid "This command will change the 'Name' field of Monitor 1 to 'test1'"
msgstr ""

#: ../../api.rst:288
msgid "Delete monitor 1"
msgstr ""

#: ../../api.rst:290
msgid ""
"This command will delete Monitor 1, but will _not_ delete any Events "
"which depend on it."
msgstr ""

#: ../../api.rst:299
msgid "Arm/Disarm monitors"
msgstr ""

#: ../../api.rst:301
msgid "This command will force an alarm on Monitor 1:"
msgstr ""

#: ../../api.rst:307
msgid "This command will disable the  alarm on Monitor 1:"
msgstr ""

#: ../../api.rst:313
msgid "This command will report the status of the alarm  Monitor 1:"
msgstr ""

#: ../../api.rst:321
msgid "Return a list of all events"
msgstr ""

#: ../../api.rst:328
msgid ""
"Note that events list can be quite large and this API (as with all other "
"APIs in ZM) uses pagination. Each page returns a specific set of entries."
" By default this is 25 and ties into WEB_EVENTS_PER_PAGE in the ZM "
"options menu."
msgstr ""

#: ../../api.rst:332
msgid ""
"So the logic to iterate through all events should be something like this "
"(pseudocode): (unfortunately there is no way to get pageCount without "
"getting the first page)"
msgstr ""

#: ../../api.rst:348
msgid "Retrieve event Id 1000"
msgstr ""

#: ../../api.rst:356
msgid "Edit event 1"
msgstr ""

#: ../../api.rst:358
msgid "This command will change the 'Name' field of Event 1 to 'Seek and Destroy'"
msgstr ""

#: ../../api.rst:365
msgid "Delete event 1"
msgstr ""

#: ../../api.rst:366
msgid "This command will delete Event 1, and any Frames which depend on it."
msgstr ""

#: ../../api.rst:374
msgid "Return a list of events for a specific monitor Id =5"
msgstr ""

#: ../../api.rst:380
msgid "Note that the same pagination logic applies if the list is too long"
msgstr ""

#: ../../api.rst:384
msgid ""
"Return a list of events for a specific monitor within a specific "
"date/time range"
msgstr ""

#: ../../api.rst:391
msgid "To try this in CuRL, you need to URL escape the spaces like so:"
msgstr ""

#: ../../api.rst:399
msgid ""
"Return a list of events for all monitors within a specified date/time "
"range"
msgstr ""

#: ../../api.rst:407
msgid "Return event count based on times and conditions"
msgstr ""

#: ../../api.rst:409
msgid ""
"The API also supports a handy mechanism to return a count of events for a"
" period of time."
msgstr ""

#: ../../api.rst:411
msgid ""
"This returns number of events per monitor that were recorded in the last "
"one hour"
msgstr ""

#: ../../api.rst:417
msgid ""
"This returns number of events per monitor that were recorded in the last "
"day where there were at least 10 frames that were alarms\""
msgstr ""

#: ../../api.rst:427
msgid "Return sorted events"
msgstr ""

#: ../../api.rst:429
msgid ""
"This returns a list of events within a time range and also sorts it by "
"descending order"
msgstr ""

#: ../../api.rst:437
msgid "Configuration Apis"
msgstr ""

#: ../../api.rst:439
msgid ""
"The APIs allow you to access all the configuration parameters of ZM that "
"you typically set inside the web console. This returns the full list of "
"configuration parameters:"
msgstr ""

#: ../../api.rst:447
msgid ""
"Each configuration parameter has an Id, Name, Value and other fields. "
"Chances are you are likely only going to focus on these 3."
msgstr ""

#: ../../api.rst:449
msgid ""
"The edit function of the Configs API is a little quirky at the moment. "
"Its format deviates from the usual edit flow of other APIs. This will be "
"fixed, eventually. For now, to change the \"Value\" of ZM_X10_HOUSE_CODE "
"from A to B:"
msgstr ""

#: ../../api.rst:455
msgid "To validate changes have been made:"
msgstr ""

#: ../../api.rst:462
msgid "Run State Apis"
msgstr ""

#: ../../api.rst:464
msgid ""
"ZM API can be used to start/stop/restart/list states of  ZM as well "
"Examples:"
msgstr ""

#: ../../api.rst:477
msgid "Create a Zone"
msgstr ""

#: ../../api.rst:505
msgid "PTZ Control Meta-Data APIs"
msgstr ""

#: ../../api.rst:506
msgid ""
"PTZ controls associated with a monitor are stored in the Controls table "
"and not the Monitors table inside ZM. What that means is when you get the"
" details of a Monitor, you will only know if it is controllable "
"(isControllable:true) and the control ID. To be able to retrieve PTZ "
"information related to that Control ID, you need to use the controls API"
msgstr ""

#: ../../api.rst:509
msgid ""
"Note that these APIs only retrieve control data related to PTZ. They "
"don't actually move the camera. See the \"PTZ on live streams\" section "
"to move the camera."
msgstr ""

#: ../../api.rst:511
msgid "This returns all the control definitions: ::"
msgstr ""

#: ../../api.rst:516
msgid "This returns control definitions for a specific control ID=5 ::"
msgstr ""

#: ../../api.rst:522
msgid "Host APIs"
msgstr ""

#: ../../api.rst:524
msgid ""
"ZM APIs have various APIs that help you in determining host (aka ZM) "
"daemon status, load etc. Some examples:"
msgstr ""

#: ../../api.rst:538
msgid "Storage and Server APIs"
msgstr ""

#: ../../api.rst:540
msgid ""
"ZoneMinder introduced many new options that allowed you to configure "
"multiserver/multistorage configurations. While a part of this was "
"available in previous versions, a lot of rework was done as part of ZM "
"1.31 and 1.32. As part of that work, a lot of new and useful APIs were "
"added. Some of these are part of ZM 1.32 and others will be part of ZM "
"1.32.3 (of course, if you build from master, you can access them right "
"away, or wait till a stable release is out."
msgstr ""

#: ../../api.rst:544
msgid ""
"This returns storage data for my single server install. If you are using "
"multi-storage, you'll see many such \"Storage\" entries, one for each "
"storage defined:"
msgstr ""

#: ../../api.rst:550 ../../api.rst:582
msgid "Returns:"
msgstr ""

#: ../../api.rst:574
msgid ""
"\"DiskSpace\" is the disk used in bytes. While this doesn't return disk "
"space data as rich as  ``/host/getDiskPercent``, it is much more "
"efficient."
msgstr ""

#: ../../api.rst:576
msgid "Similarly,"
msgstr ""

#: ../../api.rst:608
msgid ""
"This only works if you have a multiserver setup in place. If you don't it"
" will return an empty array."
msgstr ""

#: ../../api.rst:611
msgid "Other APIs"
msgstr ""

#: ../../api.rst:612
msgid ""
"This is not a complete list. ZM supports more parameters/APIs. A good way"
" to dive in is to look at the `API code "
"<https://github.com/ZoneMinder/zoneminder/tree/master/web/api/app/Controller>`__"
" directly."
msgstr ""

#: ../../api.rst:615
msgid "Streaming Interface"
msgstr ""

#: ../../api.rst:616
msgid ""
"Developers working on their application often ask if there is an \"API\" "
"to receive live streams, or recorded event streams. It is possible to "
"stream both live and recorded streams. This isn't strictly an \"API\" "
"per-se (that is, it is not integrated into the Cake PHP based API layer "
"discussed here) and also why we've used the term \"Interface\" instead of"
" an \"API\"."
msgstr ""

#: ../../api.rst:621
msgid "Live Streams"
msgstr ""

#: ../../api.rst:622
msgid ""
"What you need to know is that if you want to display \"live streams\", "
"ZoneMinder sends you streaming JPEG images (MJPEG) which can easily be "
"rendered in a browser using an ``img src`` tag."
msgstr ""

#: ../../api.rst:625
msgid "For example:"
msgstr ""

#: ../../api.rst:638
#, python-format
msgid ""
"will display a live feed from monitor id 1, scaled down by 50% in quality"
" and resized to 640x480px."
msgstr ""

#: ../../api.rst:640 ../../api.rst:679
msgid ""
"This assumes ``/zm/cgi-bin`` is your CGI_BIN path. Change it to what is "
"correct in your system"
msgstr ""

#: ../../api.rst:641
msgid ""
"The \"auth\" token you see above is required if you use ZoneMinder "
"authentication. To understand how to get the auth token, please read the "
"\"Login, Logout & API security\" section below."
msgstr ""

#: ../../api.rst:642
msgid ""
"The \"connkey\" parameter is essentially a random number which uniquely "
"identifies a stream. If you don't specify a connkey, ZM will generate its"
" own. It is recommended to generate a connkey because you can then use it"
" to \"control\" the stream (pause/resume etc.)"
msgstr ""

#: ../../api.rst:643
msgid ""
"Instead of dealing with the \"auth\" token, you can also use "
"``&user=username&pass=password`` where \"username\" and \"password\" are "
"your ZoneMinder username and password respectively. Note that this is not"
" recommended because you are transmitting them in a URL and even if you "
"use HTTPS, they may show up in web server logs."
msgstr ""

#: ../../api.rst:647
msgid "PTZ on live streams"
msgstr ""

#: ../../api.rst:648
msgid ""
"PTZ commands are pretty cryptic in ZoneMinder. This is not meant to be an"
" exhaustive guide, but just something to wet your appetite:"
msgstr ""

#: ../../api.rst:651
msgid ""
"Lets assume you have a monitor, with ID=6. Let's further assume you want "
"to pan it left."
msgstr ""

#: ../../api.rst:653
msgid ""
"You'd need to send a: ``POST`` command to "
"``https://yourserver/zm/index.php`` with the following data payload in "
"the command (NOT in the URL)"
msgstr ""

#: ../../api.rst:656
msgid "``view=request&request=control&id=6&control=moveConLeft&xge=30&yge=30``"
msgstr ""

#: ../../api.rst:658
msgid ""
"Obviously, if you are using authentication, you need to be logged in for "
"this to work."
msgstr ""

#: ../../api.rst:660
msgid ""
"Like I said, at this stage, this is only meant to get you started. "
"Explore the ZoneMinder code and use \"Inspect source\" as you use PTZ "
"commands in the ZoneMinder source code. `control_functions.php "
"<https://github.com/ZoneMinder/zoneminder/blob/10531df54312f52f0f32adec3d4720c063897b62/web/skins/classic/includes/control_functions.php>`__"
" is a great place to start."
msgstr ""

#: ../../api.rst:665
msgid "Pre-recorded (past event) streams"
msgstr ""

#: ../../api.rst:667
msgid ""
"Similar to live playback, if you have chosen to store events in JPEG "
"mode, you can play it back using:"
msgstr ""

#: ../../api.rst:680
msgid "This will playback event 293820, starting from frame 1 as an MJPEG stream"
msgstr ""

#: ../../api.rst:681
msgid "Like before, you can add more parameters like ``scale`` etc."
msgstr ""

#: ../../api.rst:682
msgid ""
"auth and connkey have the same meaning as before, and yes, you can "
"replace auth by ``&user=usename&pass=password`` as before and the same "
"security concerns cited above apply."
msgstr ""

#: ../../api.rst:684
msgid ""
"If instead, you have chosen to use the MP4 (Video) storage mode for "
"events, you can directly play back the saved video file:"
msgstr ""

#: ../../api.rst:696
msgid "This above will play back the video recording for event 294690"
msgstr ""

#: ../../api.rst:699
msgid "What other parameters are supported?"
msgstr ""

#: ../../api.rst:700
msgid ""
"The best way to answer this question is to play with ZoneMinder console. "
"Open a browser, play back live or recorded feed, and do an \"Inspect "
"Source\" to see what parameters are generated. Change and observe."
msgstr ""

#: ../../api.rst:706
msgid "Further Reading"
msgstr ""

#: ../../api.rst:708
msgid ""
"As described earlier, treat this document as an \"introduction\" to the "
"important parts of the API and streaming interfaces. There are several "
"details that haven't yet been documented. Till they are, here are some "
"resources:"
msgstr ""

#: ../../api.rst:711
msgid ""
"zmNinja, the open source mobile app for ZoneMinder is 100% based on ZM "
"APIs. Explore its `source code "
"<https://github.com/pliablepixels/zmNinja>`__ to see how things work."
msgstr ""

#: ../../api.rst:712
msgid ""
"Launch up ZM console in a browser, and do an \"Inspect source\". See how "
"images are being rendered. Go to the networks tab of the inspect source "
"console and look at network requests that are made when you "
"pause/play/forward streams."
msgstr ""

#: ../../api.rst:713
msgid ""
"If you still can't find an answer, post your question in the `forums "
"<https://forums.zoneminder.com/index.php>`__ (not the github repo)."
msgstr ""

